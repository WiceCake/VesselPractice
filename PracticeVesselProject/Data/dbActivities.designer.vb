'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="db_activities")>  _
Partial Public Class dbActivitiesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Inserttbl_activity(instance As tbl_activity)
    End Sub
  Partial Private Sub Updatetbl_activity(instance As tbl_activity)
    End Sub
  Partial Private Sub Deletetbl_activity(instance As tbl_activity)
    End Sub
  Partial Private Sub Inserttbl_vessel(instance As tbl_vessel)
    End Sub
  Partial Private Sub Updatetbl_vessel(instance As tbl_vessel)
    End Sub
  Partial Private Sub Deletetbl_vessel(instance As tbl_vessel)
    End Sub
  Partial Private Sub Inserttbl_vessel_activity(instance As tbl_vessel_activity)
    End Sub
  Partial Private Sub Updatetbl_vessel_activity(instance As tbl_vessel_activity)
    End Sub
  Partial Private Sub Deletetbl_vessel_activity(instance As tbl_vessel_activity)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.PracticeVesselProject.Settings.Default.db_activitiesConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property tbl_activities() As System.Data.Linq.Table(Of tbl_activity)
		Get
			Return Me.GetTable(Of tbl_activity)
		End Get
	End Property
	
	Public ReadOnly Property tbl_vessels() As System.Data.Linq.Table(Of tbl_vessel)
		Get
			Return Me.GetTable(Of tbl_vessel)
		End Get
	End Property
	
	Public ReadOnly Property tbl_vessel_activities() As System.Data.Linq.Table(Of tbl_vessel_activity)
		Get
			Return Me.GetTable(Of tbl_vessel_activity)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tbl_activities")>  _
Partial Public Class tbl_activity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _activity_id As Integer
	
	Private _activity_name As String
	
	Private _date_created As System.Nullable(Of Date)
	
	Private _tbl_vessel_activities As EntitySet(Of tbl_vessel_activity)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onactivity_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onactivity_idChanged()
    End Sub
    Partial Private Sub Onactivity_nameChanging(value As String)
    End Sub
    Partial Private Sub Onactivity_nameChanged()
    End Sub
    Partial Private Sub Ondate_createdChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Ondate_createdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tbl_vessel_activities = New EntitySet(Of tbl_vessel_activity)(AddressOf Me.attach_tbl_vessel_activities, AddressOf Me.detach_tbl_vessel_activities)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activity_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property activity_id() As Integer
		Get
			Return Me._activity_id
		End Get
		Set
			If ((Me._activity_id = value)  _
						= false) Then
				Me.Onactivity_idChanging(value)
				Me.SendPropertyChanging
				Me._activity_id = value
				Me.SendPropertyChanged("activity_id")
				Me.Onactivity_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activity_name", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property activity_name() As String
		Get
			Return Me._activity_name
		End Get
		Set
			If (String.Equals(Me._activity_name, value) = false) Then
				Me.Onactivity_nameChanging(value)
				Me.SendPropertyChanging
				Me._activity_name = value
				Me.SendPropertyChanged("activity_name")
				Me.Onactivity_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_date_created", DbType:="Date")>  _
	Public Property date_created() As System.Nullable(Of Date)
		Get
			Return Me._date_created
		End Get
		Set
			If (Me._date_created.Equals(value) = false) Then
				Me.Ondate_createdChanging(value)
				Me.SendPropertyChanging
				Me._date_created = value
				Me.SendPropertyChanged("date_created")
				Me.Ondate_createdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tbl_activity_tbl_vessel_activity", Storage:="_tbl_vessel_activities", ThisKey:="activity_id", OtherKey:="activity_id")>  _
	Public Property tbl_vessel_activities() As EntitySet(Of tbl_vessel_activity)
		Get
			Return Me._tbl_vessel_activities
		End Get
		Set
			Me._tbl_vessel_activities.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tbl_vessel_activities(ByVal entity As tbl_vessel_activity)
		Me.SendPropertyChanging
		entity.tbl_activity = Me
	End Sub
	
	Private Sub detach_tbl_vessel_activities(ByVal entity As tbl_vessel_activity)
		Me.SendPropertyChanging
		entity.tbl_activity = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tbl_vessels")>  _
Partial Public Class tbl_vessel
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _vessel_id As Integer
	
	Private _vessel_name As String
	
	Private _vessel_class As String
	
	Private _date_created As System.Nullable(Of Date)
	
	Private _tbl_vessel_activities As EntitySet(Of tbl_vessel_activity)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onvessel_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onvessel_idChanged()
    End Sub
    Partial Private Sub Onvessel_nameChanging(value As String)
    End Sub
    Partial Private Sub Onvessel_nameChanged()
    End Sub
    Partial Private Sub Onvessel_classChanging(value As String)
    End Sub
    Partial Private Sub Onvessel_classChanged()
    End Sub
    Partial Private Sub Ondate_createdChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Ondate_createdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tbl_vessel_activities = New EntitySet(Of tbl_vessel_activity)(AddressOf Me.attach_tbl_vessel_activities, AddressOf Me.detach_tbl_vessel_activities)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vessel_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property vessel_id() As Integer
		Get
			Return Me._vessel_id
		End Get
		Set
			If ((Me._vessel_id = value)  _
						= false) Then
				Me.Onvessel_idChanging(value)
				Me.SendPropertyChanging
				Me._vessel_id = value
				Me.SendPropertyChanged("vessel_id")
				Me.Onvessel_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vessel_name", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property vessel_name() As String
		Get
			Return Me._vessel_name
		End Get
		Set
			If (String.Equals(Me._vessel_name, value) = false) Then
				Me.Onvessel_nameChanging(value)
				Me.SendPropertyChanging
				Me._vessel_name = value
				Me.SendPropertyChanged("vessel_name")
				Me.Onvessel_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vessel_class", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property vessel_class() As String
		Get
			Return Me._vessel_class
		End Get
		Set
			If (String.Equals(Me._vessel_class, value) = false) Then
				Me.Onvessel_classChanging(value)
				Me.SendPropertyChanging
				Me._vessel_class = value
				Me.SendPropertyChanged("vessel_class")
				Me.Onvessel_classChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_date_created", DbType:="Date")>  _
	Public Property date_created() As System.Nullable(Of Date)
		Get
			Return Me._date_created
		End Get
		Set
			If (Me._date_created.Equals(value) = false) Then
				Me.Ondate_createdChanging(value)
				Me.SendPropertyChanging
				Me._date_created = value
				Me.SendPropertyChanged("date_created")
				Me.Ondate_createdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tbl_vessel_tbl_vessel_activity", Storage:="_tbl_vessel_activities", ThisKey:="vessel_id", OtherKey:="vessel_id")>  _
	Public Property tbl_vessel_activities() As EntitySet(Of tbl_vessel_activity)
		Get
			Return Me._tbl_vessel_activities
		End Get
		Set
			Me._tbl_vessel_activities.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tbl_vessel_activities(ByVal entity As tbl_vessel_activity)
		Me.SendPropertyChanging
		entity.tbl_vessel = Me
	End Sub
	
	Private Sub detach_tbl_vessel_activities(ByVal entity As tbl_vessel_activity)
		Me.SendPropertyChanging
		entity.tbl_vessel = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tbl_vessel_activities")>  _
Partial Public Class tbl_vessel_activity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _vessel_act_id As Integer
	
	Private _vessel_id As Integer
	
	Private _activity_id As Integer
	
	Private _location As String
	
	Private _longitude As System.Nullable(Of Decimal)
	
	Private _latitude As System.Nullable(Of Decimal)
	
	Private _description As String
	
	Private _date_activity As System.Nullable(Of Date)
	
	Private _date_created As System.Nullable(Of Date)
	
	Private _date_updated As System.Nullable(Of Date)
	
	Private _tbl_activity As EntityRef(Of tbl_activity)
	
	Private _tbl_vessel As EntityRef(Of tbl_vessel)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onvessel_act_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onvessel_act_idChanged()
    End Sub
    Partial Private Sub Onvessel_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onvessel_idChanged()
    End Sub
    Partial Private Sub Onactivity_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onactivity_idChanged()
    End Sub
    Partial Private Sub OnlocationChanging(value As String)
    End Sub
    Partial Private Sub OnlocationChanged()
    End Sub
    Partial Private Sub OnlongitudeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnlongitudeChanged()
    End Sub
    Partial Private Sub OnlatitudeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnlatitudeChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub Ondate_activityChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Ondate_activityChanged()
    End Sub
    Partial Private Sub Ondate_createdChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Ondate_createdChanged()
    End Sub
    Partial Private Sub Ondate_updatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Ondate_updatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tbl_activity = CType(Nothing, EntityRef(Of tbl_activity))
		Me._tbl_vessel = CType(Nothing, EntityRef(Of tbl_vessel))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vessel_act_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property vessel_act_id() As Integer
		Get
			Return Me._vessel_act_id
		End Get
		Set
			If ((Me._vessel_act_id = value)  _
						= false) Then
				Me.Onvessel_act_idChanging(value)
				Me.SendPropertyChanging
				Me._vessel_act_id = value
				Me.SendPropertyChanged("vessel_act_id")
				Me.Onvessel_act_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vessel_id", DbType:="Int NOT NULL")>  _
	Public Property vessel_id() As Integer
		Get
			Return Me._vessel_id
		End Get
		Set
			If ((Me._vessel_id = value)  _
						= false) Then
				If Me._tbl_vessel.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onvessel_idChanging(value)
				Me.SendPropertyChanging
				Me._vessel_id = value
				Me.SendPropertyChanged("vessel_id")
				Me.Onvessel_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activity_id", DbType:="Int NOT NULL")>  _
	Public Property activity_id() As Integer
		Get
			Return Me._activity_id
		End Get
		Set
			If ((Me._activity_id = value)  _
						= false) Then
				If Me._tbl_activity.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onactivity_idChanging(value)
				Me.SendPropertyChanging
				Me._activity_id = value
				Me.SendPropertyChanged("activity_id")
				Me.Onactivity_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_location", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property location() As String
		Get
			Return Me._location
		End Get
		Set
			If (String.Equals(Me._location, value) = false) Then
				Me.OnlocationChanging(value)
				Me.SendPropertyChanging
				Me._location = value
				Me.SendPropertyChanged("location")
				Me.OnlocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longitude", DbType:="Decimal(10,6)")>  _
	Public Property longitude() As System.Nullable(Of Decimal)
		Get
			Return Me._longitude
		End Get
		Set
			If (Me._longitude.Equals(value) = false) Then
				Me.OnlongitudeChanging(value)
				Me.SendPropertyChanging
				Me._longitude = value
				Me.SendPropertyChanged("longitude")
				Me.OnlongitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_latitude", DbType:="Decimal(10,6)")>  _
	Public Property latitude() As System.Nullable(Of Decimal)
		Get
			Return Me._latitude
		End Get
		Set
			If (Me._latitude.Equals(value) = false) Then
				Me.OnlatitudeChanging(value)
				Me.SendPropertyChanging
				Me._latitude = value
				Me.SendPropertyChanged("latitude")
				Me.OnlatitudeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_date_activity", DbType:="Date")>  _
	Public Property date_activity() As System.Nullable(Of Date)
		Get
			Return Me._date_activity
		End Get
		Set
			If (Me._date_activity.Equals(value) = false) Then
				Me.Ondate_activityChanging(value)
				Me.SendPropertyChanging
				Me._date_activity = value
				Me.SendPropertyChanged("date_activity")
				Me.Ondate_activityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_date_created", DbType:="Date")>  _
	Public Property date_created() As System.Nullable(Of Date)
		Get
			Return Me._date_created
		End Get
		Set
			If (Me._date_created.Equals(value) = false) Then
				Me.Ondate_createdChanging(value)
				Me.SendPropertyChanging
				Me._date_created = value
				Me.SendPropertyChanged("date_created")
				Me.Ondate_createdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_date_updated", DbType:="Date")>  _
	Public Property date_updated() As System.Nullable(Of Date)
		Get
			Return Me._date_updated
		End Get
		Set
			If (Me._date_updated.Equals(value) = false) Then
				Me.Ondate_updatedChanging(value)
				Me.SendPropertyChanging
				Me._date_updated = value
				Me.SendPropertyChanged("date_updated")
				Me.Ondate_updatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tbl_activity_tbl_vessel_activity", Storage:="_tbl_activity", ThisKey:="activity_id", OtherKey:="activity_id", IsForeignKey:=true)>  _
	Public Property tbl_activity() As tbl_activity
		Get
			Return Me._tbl_activity.Entity
		End Get
		Set
			Dim previousValue As tbl_activity = Me._tbl_activity.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tbl_activity.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tbl_activity.Entity = Nothing
					previousValue.tbl_vessel_activities.Remove(Me)
				End If
				Me._tbl_activity.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tbl_vessel_activities.Add(Me)
					Me._activity_id = value.activity_id
				Else
					Me._activity_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tbl_activity")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tbl_vessel_tbl_vessel_activity", Storage:="_tbl_vessel", ThisKey:="vessel_id", OtherKey:="vessel_id", IsForeignKey:=true)>  _
	Public Property tbl_vessel() As tbl_vessel
		Get
			Return Me._tbl_vessel.Entity
		End Get
		Set
			Dim previousValue As tbl_vessel = Me._tbl_vessel.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tbl_vessel.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tbl_vessel.Entity = Nothing
					previousValue.tbl_vessel_activities.Remove(Me)
				End If
				Me._tbl_vessel.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tbl_vessel_activities.Add(Me)
					Me._vessel_id = value.vessel_id
				Else
					Me._vessel_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tbl_vessel")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
